# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: acs12.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from aelf import options_pb2 as aelf_dot_options__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2
from aelf import core_pb2 as aelf_dot_core__pb2

from aelf.options_pb2 import *
from google.protobuf.empty_pb2 import *
from google.protobuf.wrappers_pb2 import *

DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0b\x61\x63s12.proto\x12\x05\x61\x63s12\x1a\x12\x61\x65lf/options.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x0f\x61\x65lf/core.proto\"^\n\x16UserContractMethodFees\x12*\n\x04\x66\x65\x65s\x18\x02 \x03(\x0b\x32\x1c.acs12.UserContractMethodFee\x12\x18\n\x10is_size_fee_free\x18\x03 \x01(\x08\":\n\x15UserContractMethodFee\x12\x0e\n\x06symbol\x18\x01 \x01(\t\x12\x11\n\tbasic_fee\x18\x02 \x01(\x03\x32\x0e\n\x0cUserContractB!\xaa\x02\x14\x41\x45lf.Standards.ACS12\x8a\x92\xf4\x01\x05\x61\x63s12P\x00P\x01P\x02\x62\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'acs12_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\252\002\024AElf.Standards.ACS12\212\222\364\001\005acs12'
  _USERCONTRACTMETHODFEES._serialized_start=120
  _USERCONTRACTMETHODFEES._serialized_end=214
  _USERCONTRACTMETHODFEE._serialized_start=216
  _USERCONTRACTMETHODFEE._serialized_end=274
  _USERCONTRACT._serialized_start=276
  _USERCONTRACT._serialized_end=290
# @@protoc_insertion_point(module_scope)
